{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "properties": {
        "tagPrefix": {
            "type": "string",
            "description": "The prefix used for Git tags, usually the project name"
        },
        "versionStrategy": {
            "type": "string",
            "enum": [
                "branchName",
                "commitMessage"
            ],
            "default": "commitMessage",
            "description": "The versioning strategy to use, either 'branchName' or 'commitMessage'. Select 'branchName' if you want to calculate the version based on the branch name, and 'commitMessage' if you want to calculate the version based on the commit message.",
            "examples": [
                "branchName => v1.0.0 branchName 'patch*' => v1.0.1, branchName 'minor*' => v1.1.0, branchName 'major*' => v2.0.0",
                "commitMessage => commit message follows the pattern feat/fix/refactor(context changed): release version"
            ]
        },
        "preset": {
            "oneOf": [
                {
                    "type": "string",
                    "enum": [
                        "angular",
                        "conventional"
                    ],
                    "default": "angular"
                }
            ],
            "description": "The commit message convention preset used by commitizen. That applies only when `versionStrategy` is 'commitMessage'"
        },
        "branchNamePattern": {
            "type": "array",
            "items": {
                "type": "string",
                "description": "Pattern to match the branch name"
            },
            "description": "The pattern to match the branch name. Only applies when `versionStrategy` is 'branchName'",
            "examples": [
                "[major, minor, patch] => [1.0.0, 1.1.0, 1.0.1]",
                "[break, feat, fix] => [1.0.0, 1.1.0, 1.0.1]"
            ]
        },
        "synced": {
            "type": "boolean",
            "description": "Whether or not the local Git repository is synced with the remote repository"
        },
        "updateInternalDependencies": {
            "type": "string",
            "enum": [
                "major",
                "minor",
                "patch",
                false
            ],
            "description": "How to update internal dependencies between packages"
        },
        "skip": {
            "type": "array",
            "items": {
                "type": "string",
                "description": "Name of the package to skip"
            },
            "uniqueItems": true,
            "example": [
                "ui",
                "docs"
            ],
            "description": "A list of package names to skip publishing. When specified, these packages will be excluded from the publish process."
        },
        "commitMessage": {
            "type": "string",
            "description": "The commit message",
            "examples": [
                "[skip-ci]",
                "chore(${projectName}): release version ${version} [skip-ci]"
            ]
        }
    },
    "required": [
        "tagPrefix",
        "baseBranch",
        "updateInternalDependencies"
    ]
}